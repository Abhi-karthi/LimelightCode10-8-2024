
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.hardware.limelightvision.LLResult;
import com.qualcomm.hardware.limelightvision.Limelight3A;
import com.qualcomm.hardware.limelightvision.LLResultTypes;
import com.qualcomm.hardware.limelightvision.LLStatus;
import com.qualcomm.robotcore.util.Range;

import java.util.List;

@TeleOp(name="LimelightColorDetection", group="Linear OpMode")

public class LimelightColorDetection extends LinearOpMode {

    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor backLeft;
    private DcMotor backRight;
    private Limelight3A limelight;
    private int activePipeline = 0;

    public double calculateDistanceFromArea(double area) {
        if (area == 0) {
            return Double.MAX_VALUE; // No target detected
        }

        // Calibration factor based on testing (tune this for your setup)
        double calibrationFactor = 21.5; // Example, adjust this value

        // Calculate the distance using the area, assuming inverse-square relationship
        double distance = calibrationFactor / Math.sqrt(area);
        distance = distance;

        return distance; // Distance in inches
    }

    @Override
    public void runOpMode() {
        // Initialize the motors
        // Initialize the motors
        frontLeft = hardwareMap.get(DcMotor.class, "front_left_motor");
        frontRight = hardwareMap.get(DcMotor.class, "front_right_motor");
        backLeft = hardwareMap.get(DcMotor.class, "back_left_motor");
        backRight = hardwareMap.get(DcMotor.class, "back_right_motor");

        // Set motor direction
        frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        backLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        frontRight.setDirection(DcMotorSimple.Direction.FORWARD);
        backRight.setDirection(DcMotorSimple.Direction.FORWARD);

        // Initialize the Limelight object
        limelight = hardwareMap.get(Limelight3A.class, "limelight");
        limelight.setPollRateHz(100); // Set polling rate for Limelight
        limelight.start();
        limelight.pipelineSwitch(activePipeline);
        telemetry.addData("Status", "Initialized");

        // Variable Initialization

        boolean team = false; // false is red and true is blue
        boolean checkTeamCodeRan = false; // Boolean to check if the code to check the team has ran double
        double scale = 0;
        double drive = gamepad1.left_stick_y; // Forward/backward
        double strafe = -gamepad1.left_stick_x; // Left/right
        double rotate = -gamepad1.right_stick_x; // Rotation
        double targetY = 0;
        double targetArea = 0;
        boolean hasTarget = false;
        double frontLeftPower = drive + strafe + rotate;
        double frontRightPower = drive - strafe - rotate;
        double backLeftPower = drive - strafe + rotate;
        double backRightPower = drive + strafe - rotate;
        double distance = calculateDistanceFromArea(targetArea);
        int id = 0;


        while (opModeInInit()) {
            if (gamepad1.b) {
                team = false; // Left bumper is red
                telemetry.addData("Team","Red");
            } else if (gamepad1.x) {
                team = true; // Right bumper is blue
                telemetry.addData("Team","Blue");
            }
        }



        waitForStart();
        while (opModeIsActive()) {
            // Get Limelight data
            // Mecanum drive variables
            drive = gamepad1.left_stick_y; // Forward/backward
            strafe = -gamepad1.left_stick_x; // Left/right
            rotate = -gamepad1.right_stick_x; // Rotation


            // Switch between color detection pipelines
            if (gamepad1.dpad_left) {
                activePipeline = 0; // Yellow
            } else if (gamepad1.dpad_right) { // Team Color
                if (team) {
                    activePipeline = 1; // Blue

                } else {
                    activePipeline = 2; // Red
                }
            } else if (gamepad1.dpad_up) {
                activePipeline = 3;
            }
            limelight.pipelineSwitch(activePipeline);

            LLResult result = limelight.getLatestResult();
            targetY = 0;
            targetArea = 0;
            hasTarget = false;

            if (result != null && result.isValid()) {
                targetY = result.getTy(); // Horizontal offset from target
                if (targetY >= 0) {
                    scale = targetY / 5;
                } else {
                    scale = targetY / -5;
                }
                targetArea = result.getTa(); // Area of the target (useful for distance)
                hasTarget = true;
                telemetry.addData("Target X", targetY);
                telemetry.addData("Target Area", targetArea);
                if (activePipeline == 3) {
                    List<LLResultTypes.FiducialResult> tags = result.getFiducialResults();
                    for (LLResultTypes.FiducialResult tag : tags) {
                        id = tag.getFiducialId();
                        targetY = tag.getTargetYDegrees(); // Horizontal offset from target
                        if (targetY >= 0) {
                            scale = targetY / 5;
                        } else {
                            scale = targetY / -5;
                        }
                        // Use tag data
                }
            } else {
                hasTarget = false;
            }
            if ((gamepad1.dpad_right || gamepad1.dpad_left) && hasTarget) {
                telemetry.addData("Rotation without scale", -Range.clip(targetY / 150, -1.0, 1.0));
                telemetry.addData("Rotation with scale", scale * -Range.clip(targetY / 150, -1.0, 1.0));
                telemetry.addData("Scale", scale);

                rotate = scale * -Range.clip(targetY / 150, -1.0, 1.0); // Adjust rotation based on target's X-axis offset
//                if (targetArea < 0.05) {
//                    if (targetArea < 0.02) {
//                        drive = -1;
//                    } else if (targetArea < 0.04) {
//                        drive = -.5;
//                    } else {
//                        drive = -0.25;
//                    }
//                } else if (targetArea > 0.1) {
//                    if (targetArea > 0.15) {
//                        drive = .5;
//                    } else {
//                        drive = 0.25;
//                    }
//                }
            }

            distance = calculateDistanceFromArea(targetArea);
            telemetry.addData("Distance", distance);


            frontLeftPower = drive + strafe + rotate;
            frontRightPower = drive - strafe - rotate;
            backLeftPower = drive - strafe + rotate;
            backRightPower = drive + strafe - rotate;


            // Normalize the motor powers to keep them within range [-1, 1]
            frontLeftPower = Range.clip(frontLeftPower, -1.0, 1.0);
            frontRightPower = Range.clip(frontRightPower, -1.0, 1.0);
            backLeftPower = Range.clip(backLeftPower, -1.0, 1.0);
            backRightPower = Range.clip(backRightPower, -1.0, 1.0);


            // Set the motor powers
            frontLeft.setPower(frontLeftPower);
            frontRight.setPower(frontRightPower);
            backLeft.setPower(backLeftPower);
            backRight.setPower(backRightPower);


            // Show telemetry
            telemetry.addData("Front Left Power", frontLeftPower);
            telemetry.addData("Front Right Power", frontRightPower);
            telemetry.addData("Back Left Power", backLeftPower);
            telemetry.addData("Back Right Power", backRightPower);
            telemetry.addData("Target", hasTarget);
            telemetry.addData("April Tag ID", id);
            telemetry.addData("Status", "Running");
            if (activePipeline == 0) {
                telemetry.addData("Pipeline", "Yellow");
            } else if (activePipeline == 1) {
                telemetry.addData("Pipeline", "Blue");
            } else if (activePipeline == 2) {
                telemetry.addData("Pipeline", "Red");
            } else if (activePipeline == 3) {
                telemetry.addData("Pipeline", "AprilTag");
            }
            telemetry.update();

        }
    }
}
